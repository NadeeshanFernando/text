name: Multi-Repo PR Digest

on:
  schedule:
    - cron: '30 3 * * *'  # 9:00 AM SLT
  workflow_dispatch:

jobs:
  sprint-pr-report:
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack PR Report
        uses: actions/github-script@v7
        with:
          # Use Personal Access Token if scanning private repos
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username = "NadeeshanFernando";
            const sprintLabel = "sprint-47";
            const includePrefix = ""; // optional: e.g., "fusionx-"

            const getHoursAgo = (dateStr) => {
              const msDiff = Date.now() - new Date(dateStr).getTime();
              return Math.floor(msDiff / 3600000);
            };

            // Fetch all repos for user/org
            const { data: reposList } = await github.rest.repos.listForUser({
              username,
              per_page: 100
            });

            let totalPRs = 0;
            let report = "";

            for (const repoObj of reposList) {
              const repo = repoObj.name;
              if (includePrefix && !repo.startsWith(includePrefix)) continue;

              const { data: prs } = await github.rest.pulls.list({
                owner: username,
                repo,
                state: "open",
                per_page: 100,
              });

              const sprintPRs = prs.filter(pr =>
                pr.labels.some(label => label.name === sprintLabel)
              );

              if (sprintPRs.length === 0) continue;

              totalPRs += sprintPRs.length;
              report += `*Repository:* ${repo}\n`;

              sprintPRs.forEach(pr => {
                const opened = getHoursAgo(pr.created_at);
                const updated = getHoursAgo(pr.updated_at);
                const author = pr.user?.login || "Unknown";
                const status = pr.draft ? "Draft" : "Open";

                report += `• <${pr.html_url}|*PR #${pr.number} - ${pr.title}*>\n`;
                report += `  *Author*        : @${author}\n`;
                report += `  *Opened*        : ${opened}h ago\n`;
                report += `  *Last Updated*  : ${updated}h ago\n`;
                report += `  *Status*        : ${status}\n\n`;
              });

              report += `──────────────────────────────\n\n`;
            }

            const date = new Date().toLocaleString("en-US", {
              timeZone: "Asia/Colombo",
              dateStyle: "long",
              timeStyle: "short"
            });

            if (totalPRs === 0) {
              report = `All PRs for *${sprintLabel}* are merged ✅`;
            } else {
              report =
                `*Sprint PR Summary – ${sprintLabel}*\n` +
                `*Total PRs to merge:* ${totalPRs}\n` +
                `──────────────────────────────\n\n` +
                report +
                `*Report generated:* ${date} (SLT)`;
            }

            const webhook = process.env.SLACK_WEBHOOK_URL;
            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ text: report })
            });
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
